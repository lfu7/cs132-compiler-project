func _Main()
t0 = 4
t1 = 4
t2 = alloc(t0)
t0 = alloc(t1)
[t2 + 0] = t0
t1 = @TV_Start
[t0 + 0] = t1
t0 = [t2 + 0]
t1 = [t0 + 0]
s11 = t1
a2 = t2
s10 = call s11()
t0 = s10
print(t0)
v0 = t0
      return v0

func TV_Start()
t0 = 52
t1 = 84
t2 = alloc(t0)
t0 = alloc(t1)
[t2 + 0] = t0
t1 = @Tree_Init
[t0 + 0] = t1
t1 = @Tree_SetRight
[t0 + 4] = t1
t1 = @Tree_SetLeft
[t0 + 8] = t1
t1 = @Tree_GetRight
[t0 + 12] = t1
t1 = @Tree_GetLeft
[t0 + 16] = t1
t1 = @Tree_GetKey
[t0 + 20] = t1
t1 = @Tree_SetKey
[t0 + 24] = t1
t1 = @Tree_GetHas_Right
[t0 + 28] = t1
t1 = @Tree_GetHas_Left
[t0 + 32] = t1
t1 = @Tree_SetHas_Left
[t0 + 36] = t1
t1 = @Tree_SetHas_Right
[t0 + 40] = t1
t1 = @Tree_Compare
[t0 + 44] = t1
t1 = @Tree_Insert
[t0 + 48] = t1
t1 = @Tree_Delete
[t0 + 52] = t1
t1 = @Tree_Remove
[t0 + 56] = t1
t1 = @Tree_RemoveRight
[t0 + 60] = t1
t1 = @Tree_RemoveLeft
[t0 + 64] = t1
t1 = @Tree_Search
[t0 + 68] = t1
t1 = @Tree_Print
[t0 + 72] = t1
t1 = @Tree_RecPrint
[t0 + 76] = t1
t1 = @Tree_accept
[t0 + 80] = t1
t0 = t2
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 0]
t2 = 16
s11 = t3
a2 = t1
a3 = t2
root = t0
s10 = call s11()
t0 = root
t4 = s10
t1 = t4
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 72]
s11 = t3
a2 = t1
root = t0
s10 = call s11()
t0 = root
t2 = s10
t1 = t2
t1 = 100000000
print(t1)
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 48]
t2 = 8
s11 = t3
a2 = t1
a3 = t2
root = t0
s10 = call s11()
t0 = root
t4 = s10
t1 = t4
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 48]
t2 = 24
s11 = t3
a2 = t1
a3 = t2
root = t0
s10 = call s11()
t0 = root
t4 = s10
t1 = t4
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 48]
t2 = 4
s11 = t3
a2 = t1
a3 = t2
root = t0
s10 = call s11()
t0 = root
t4 = s10
t1 = t4
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 48]
t2 = 12
s11 = t3
a2 = t1
a3 = t2
root = t0
s10 = call s11()
t0 = root
t4 = s10
t1 = t4
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 48]
t2 = 20
s11 = t3
a2 = t1
a3 = t2
root = t0
s10 = call s11()
t0 = root
t4 = s10
t1 = t4
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 48]
t2 = 28
s11 = t3
a2 = t1
a3 = t2
root = t0
s10 = call s11()
t0 = root
t4 = s10
t1 = t4
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 48]
t2 = 14
s11 = t3
a2 = t1
a3 = t2
root = t0
s10 = call s11()
t0 = root
t4 = s10
t1 = t4
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 72]
s11 = t3
a2 = t1
root = t0
s10 = call s11()
t0 = root
t2 = s10
t1 = t2
t1 = 100000000
print(t1)
t1 = 20
t2 = 4
t3 = alloc(t1)
t1 = alloc(t2)
[t3 + 0] = t1
t2 = @MyVisitor_visit
[t1 + 0] = t2
t2 = @MyVisitor_visit
[t1 + 0] = t2
t1 = t3
t2 = 50000000
print(t2)
t2 = t0
t3 = [t2 + 0]
t4 = [t3 + 80]
t3 = t1
s11 = t4
a2 = t2
a3 = t3
root = t0
s10 = call s11()
t0 = root
t1 = s10
t2 = t1
t1 = 100000000
print(t1)
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 68]
t2 = 24
s11 = t3
a2 = t1
a3 = t2
root = t0
s10 = call s11()
t0 = root
t4 = s10
print(t4)
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 68]
t2 = 12
s11 = t3
a2 = t1
a3 = t2
root = t0
s10 = call s11()
t0 = root
t4 = s10
print(t4)
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 68]
t2 = 16
s11 = t3
a2 = t1
a3 = t2
root = t0
s10 = call s11()
t0 = root
t4 = s10
print(t4)
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 68]
t2 = 50
s11 = t3
a2 = t1
a3 = t2
root = t0
s10 = call s11()
t0 = root
t4 = s10
print(t4)
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 68]
t2 = 12
s11 = t3
a2 = t1
a3 = t2
root = t0
s10 = call s11()
t0 = root
t4 = s10
print(t4)
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 52]
t2 = 12
s11 = t3
a2 = t1
a3 = t2
root = t0
s10 = call s11()
t0 = root
t4 = s10
t1 = t4
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 72]
s11 = t3
a2 = t1
root = t0
s10 = call s11()
t0 = root
t2 = s10
t1 = t2
t1 = t0
t0 = [t1 + 0]
t2 = [t0 + 68]
t0 = 12
s11 = t2
a2 = t1
a3 = t0
s10 = call s11()
t3 = s10
print(t3)
t0 = 0
v127 = t0
      return v127

func Tree_Init()
t0 = 16
t1 = 4
t0 = t0 + t1
t2 = a2 + t0
t0 = 1
t3 = t2
t3 = t3 + t1
[t3 + 0] = t0
t0 = a3
[t2 + 0] = t0
t0 = 24
t1 = 4
t0 = t0 + t1
t2 = a2 + t0
t0 = 1
t3 = t2
t3 = t3 + t1
[t3 + 0] = t0
t0 = 0
[t2 + 0] = t0
t0 = 32
t1 = 4
t0 = t0 + t1
t2 = a2 + t0
t0 = 1
t3 = t2
t3 = t3 + t1
[t3 + 0] = t0
t0 = 0
[t2 + 0] = t0
t0 = 1
v18 = t0
      return v18

func Tree_SetRight()
t0 = 8
t1 = 4
t0 = t0 + t1
t2 = a2 + t0
t0 = 1
t3 = t2
t3 = t3 + t1
[t3 + 0] = t0
t0 = a3
[t2 + 0] = t0
t0 = 1
v6 = t0
      return v6

func Tree_SetLeft()
t0 = 0
t1 = 4
t0 = t0 + t1
t2 = a2 + t0
t0 = 1
t3 = t2
t3 = t3 + t1
[t3 + 0] = t0
t0 = a3
[t2 + 0] = t0
t0 = 1
v6 = t0
      return v6

func Tree_GetRight()
t0 = 8
t1 = 4
t0 = t0 + t1
t1 = a2 + t0
t0 = [t1 + 0]
v0 = t0
      return v0

func Tree_GetLeft()
t0 = 0
t1 = 4
t0 = t0 + t1
t1 = a2 + t0
t0 = [t1 + 0]
v0 = t0
      return v0

func Tree_GetKey()
t0 = 16
t1 = 4
t0 = t0 + t1
t1 = a2 + t0
t0 = [t1 + 0]
v0 = t0
      return v0

func Tree_SetKey()
t0 = 16
t1 = 4
t0 = t0 + t1
t2 = a2 + t0
t0 = 1
t3 = t2
t3 = t3 + t1
[t3 + 0] = t0
t0 = a3
[t2 + 0] = t0
t0 = 1
v6 = t0
      return v6

func Tree_GetHas_Right()
t0 = 32
t1 = 4
t0 = t0 + t1
t1 = a2 + t0
t0 = [t1 + 0]
v0 = t0
      return v0

func Tree_GetHas_Left()
t0 = 24
t1 = 4
t0 = t0 + t1
t1 = a2 + t0
t0 = [t1 + 0]
v0 = t0
      return v0

func Tree_SetHas_Left()
t0 = 24
t1 = 4
t0 = t0 + t1
t2 = a2 + t0
t0 = 1
t3 = t2
t3 = t3 + t1
[t3 + 0] = t0
t0 = a3
[t2 + 0] = t0
t0 = 1
v6 = t0
      return v6

func Tree_SetHas_Right()
t0 = 32
t1 = 4
t0 = t0 + t1
t2 = a2 + t0
t0 = 1
t3 = t2
t3 = t3 + t1
[t3 + 0] = t0
t0 = a3
[t2 + 0] = t0
t0 = 1
v6 = t0
      return v6

func Tree_Compare()
t0 = 0
t1 = t0
t0 = a4
t2 = 1
t3 = t0 + t2
t0 = t3
t2 = a3
t3 = a4
t4 = t2 < t3
if0 t4 goto if_else_7
t2 = 0
t1 = t2
goto if_end_9
if_else_7:
t2 = a3
t3 = t0
t0 = t2 < t3
if0 t0 goto if_else_14
t0 = 0
goto if_end_15
if_else_14:
t0 = 1
if_end_15:
if0 t0 goto if_else_16
t0 = 0
t1 = t0
goto if_end_18
if_else_16:
t0 = 1
t1 = t0
if_end_18:
if_end_9:
t0 = t1
v20 = t0
      return v20

func Tree_Insert()
stack_save_variable_s3 = s3
stack_save_variable_s4 = s4
stack_save_variable_s5 = s5
stack_save_variable_s6 = s6
stack_save_variable_s7 = s7
stack_save_variable_s8 = s8
stack_save_variable_s9 = s9
stack_save_variable_s1 = s1
stack_save_variable_s2 = s2
t0 = 52
t1 = 84
t2 = alloc(t0)
t0 = alloc(t1)
[t2 + 0] = t0
t1 = @Tree_Init
[t0 + 0] = t1
t1 = @Tree_SetRight
[t0 + 4] = t1
t1 = @Tree_SetLeft
[t0 + 8] = t1
t1 = @Tree_GetRight
[t0 + 12] = t1
t1 = @Tree_GetLeft
[t0 + 16] = t1
t1 = @Tree_GetKey
[t0 + 20] = t1
t1 = @Tree_SetKey
[t0 + 24] = t1
t1 = @Tree_GetHas_Right
[t0 + 28] = t1
t1 = @Tree_GetHas_Left
[t0 + 32] = t1
t1 = @Tree_SetHas_Left
[t0 + 36] = t1
t1 = @Tree_SetHas_Right
[t0 + 40] = t1
t1 = @Tree_Compare
[t0 + 44] = t1
t1 = @Tree_Insert
[t0 + 48] = t1
t1 = @Tree_Delete
[t0 + 52] = t1
t1 = @Tree_Remove
[t0 + 56] = t1
t1 = @Tree_RemoveRight
[t0 + 60] = t1
t1 = @Tree_RemoveLeft
[t0 + 64] = t1
t1 = @Tree_Search
[t0 + 68] = t1
t1 = @Tree_Print
[t0 + 72] = t1
t1 = @Tree_RecPrint
[t0 + 76] = t1
t1 = @Tree_accept
[t0 + 80] = t1
t0 = t2
t1 = t0
t2 = [t1 + 0]
t3 = [t2 + 0]
t2 = a3
s11 = t3
this = a2
v_key = a3
a2 = t1
a3 = t2
new_node = t0
s10 = call s11()
a2 = this
a3 = v_key
t0 = new_node
t4 = s10
t1 = t4
t1 = a2
t2 = t1
t1 = 1
t3 = t1
while32:
t1 = t3
if0 t1 goto break_while_34
t4 = t2
t5 = [t4 + 0]
s1 = [t5 + 20]
s11 = s1
v_key = a3
a2 = t4
new_node = t0
v33 = t1
current_node = t2
cont = t3
v36 = t4
vmt_address37 = t5
s10 = call s11()
a3 = v_key
t0 = new_node
t1 = v33
t2 = current_node
t3 = cont
t4 = v36
t5 = vmt_address37
s2 = s10
s3 = s2
s4 = a3
s5 = s3
s6 = s4 < s5
if0 s6 goto if_else_42
s7 = t2
s8 = [s7 + 0]
s9 = [s8 + 32]
s11 = s9
v_key = a3
a2 = s7
new_node = t0
v33 = t1
current_node = t2
cont = t3
v36 = t4
vmt_address37 = t5
s10 = call s11()
a3 = v_key
t0 = new_node
t1 = v33
t2 = current_node
t3 = cont
t4 = v36
t5 = vmt_address37
a2 = s10
if0 a2 goto if_else_47
a4 = t2
a5 = [a4 + 0]
a6 = [a5 + 16]
s11 = a6
v43 = a2
v_key = a3
v49 = a4
vmt_address50 = a5
f51 = a6
a2 = v49
new_node = t0
v33 = t1
current_node = t2
cont = t3
v36 = t4
vmt_address37 = t5
s10 = call s11()
a2 = v43
a3 = v_key
a4 = v49
a5 = vmt_address50
a6 = f51
t0 = new_node
t1 = v33
t2 = current_node
t3 = cont
t4 = v36
t5 = vmt_address37
a7 = s10
t2 = a7
goto if_end_52
if_else_47:
s10 = 0
v53 = s10
s11 = v53
t3 = s11
s10 = t2
v55 = s10
s11 = v55
s10 = [s11 + 0]
vmt_address56 = s10
s11 = vmt_address56
s10 = [s11 + 36]
f57 = s10
s10 = 1
v58 = s10
s11 = f57
v43 = a2
v_key = a3
v49 = a4
vmt_address50 = a5
f51 = a6
v48 = a7
a2 = v55
a3 = v58
new_node = t0
v33 = t1
current_node = t2
cont = t3
v36 = t4
vmt_address37 = t5
s10 = call s11()
a2 = v43
a3 = v_key
a4 = v49
a5 = vmt_address50
a6 = f51
a7 = v48
t0 = new_node
t1 = v33
t2 = current_node
t3 = cont
t4 = v36
t5 = vmt_address37
v54 = s10
s11 = v54
s10 = s11
ntb = s10
s10 = t2
v60 = s10
s11 = v60
s10 = [s11 + 0]
vmt_address61 = s10
s11 = vmt_address61
s10 = [s11 + 8]
f62 = s10
s10 = t0
v63 = s10
s11 = f62
v43 = a2
v_key = a3
v49 = a4
vmt_address50 = a5
f51 = a6
v48 = a7
a2 = v60
a3 = v63
new_node = t0
v33 = t1
current_node = t2
cont = t3
v36 = t4
vmt_address37 = t5
s10 = call s11()
a2 = v43
a3 = v_key
a4 = v49
a5 = vmt_address50
a6 = f51
a7 = v48
t0 = new_node
t1 = v33
t2 = current_node
t3 = cont
t4 = v36
t5 = vmt_address37
v59 = s10
s11 = v59
s10 = s11
ntb = s10
if_end_52:
goto if_end_64
if_else_42:
s10 = t2
v66 = s10
s11 = v66
s10 = [s11 + 0]
vmt_address67 = s10
s11 = vmt_address67
s10 = [s11 + 28]
f68 = s10
s11 = f68
v43 = a2
v_key = a3
v49 = a4
vmt_address50 = a5
f51 = a6
v48 = a7
a2 = v66
new_node = t0
v33 = t1
current_node = t2
cont = t3
v36 = t4
vmt_address37 = t5
s10 = call s11()
a2 = v43
a3 = v_key
a4 = v49
a5 = vmt_address50
a6 = f51
a7 = v48
t0 = new_node
t1 = v33
t2 = current_node
t3 = cont
t4 = v36
t5 = vmt_address37
v65 = s10
s10 = v65
if0 s10 goto if_else_69
s10 = t2
v71 = s10
s11 = v71
s10 = [s11 + 0]
vmt_address72 = s10
s11 = vmt_address72
s10 = [s11 + 12]
f73 = s10
s11 = f73
v43 = a2
v_key = a3
v49 = a4
vmt_address50 = a5
f51 = a6
v48 = a7
a2 = v71
new_node = t0
v33 = t1
current_node = t2
cont = t3
v36 = t4
vmt_address37 = t5
s10 = call s11()
a2 = v43
a3 = v_key
a4 = v49
a5 = vmt_address50
a6 = f51
a7 = v48
t0 = new_node
t1 = v33
t2 = current_node
t3 = cont
t4 = v36
t5 = vmt_address37
v70 = s10
s11 = v70
t2 = s11
goto if_end_74
if_else_69:
s10 = 0
v75 = s10
s11 = v75
t3 = s11
s10 = t2
v77 = s10
s11 = v77
s10 = [s11 + 0]
vmt_address78 = s10
s11 = vmt_address78
s10 = [s11 + 40]
f79 = s10
s10 = 1
v80 = s10
s11 = f79
v43 = a2
v_key = a3
v49 = a4
vmt_address50 = a5
f51 = a6
v48 = a7
a2 = v77
a3 = v80
new_node = t0
v33 = t1
current_node = t2
cont = t3
v36 = t4
vmt_address37 = t5
s10 = call s11()
a2 = v43
a3 = v_key
a4 = v49
a5 = vmt_address50
a6 = f51
a7 = v48
t0 = new_node
t1 = v33
t2 = current_node
t3 = cont
t4 = v36
t5 = vmt_address37
v76 = s10
s11 = v76
s10 = s11
ntb = s10
s10 = t2
v82 = s10
s11 = v82
s10 = [s11 + 0]
vmt_address83 = s10
s11 = vmt_address83
s10 = [s11 + 4]
f84 = s10
s10 = t0
v85 = s10
s11 = f84
v43 = a2
v_key = a3
v49 = a4
vmt_address50 = a5
f51 = a6
v48 = a7
a2 = v82
a3 = v85
new_node = t0
v33 = t1
current_node = t2
cont = t3
v36 = t4
vmt_address37 = t5
s10 = call s11()
a2 = v43
a3 = v_key
a4 = v49
a5 = vmt_address50
a6 = f51
a7 = v48
t0 = new_node
t1 = v33
t2 = current_node
t3 = cont
t4 = v36
t5 = vmt_address37
v81 = s10
s11 = v81
s10 = s11
ntb = s10
if_end_74:
if_end_64:
goto while32
break_while_34:
t0 = 1
v86 = t0
s3 = stack_save_variable_s3
s4 = stack_save_variable_s4
s5 = stack_save_variable_s5
s6 = stack_save_variable_s6
s7 = stack_save_variable_s7
s8 = stack_save_variable_s8
s9 = stack_save_variable_s9
s1 = stack_save_variable_s1
s2 = stack_save_variable_s2
      return v86

func Tree_Delete()
stack_save_variable_s3 = s3
stack_save_variable_s4 = s4
stack_save_variable_s5 = s5
stack_save_variable_s6 = s6
stack_save_variable_s7 = s7
stack_save_variable_s8 = s8
stack_save_variable_s9 = s9
stack_save_variable_s1 = s1
stack_save_variable_s2 = s2
t0 = a2
t1 = t0
t0 = a2
t2 = t0
t0 = 1
t3 = t0
t0 = 0
t4 = t0
t0 = 1
t5 = t0
while5:
t0 = t3
if0 t0 goto break_while_7
s1 = t1
s2 = [s1 + 0]
s3 = [s2 + 20]
s11 = s3
this = a2
v_key = a3
a2 = s1
v6 = t0
current_node = t1
parent_node = t2
cont = t3
found = t4
is_root = t5
s10 = call s11()
a2 = this
a3 = v_key
t0 = v6
t1 = current_node
t2 = parent_node
t3 = cont
t4 = found
t5 = is_root
s4 = s10
s5 = s4
s6 = a3
s7 = s5
s8 = s6 < s7
if0 s8 goto if_else_15
s9 = t1
a4 = [s9 + 0]
a5 = [a4 + 32]
s11 = a5
this = a2
v_key = a3
vmt_address18 = a4
f19 = a5
a2 = s9
v6 = t0
current_node = t1
parent_node = t2
cont = t3
found = t4
is_root = t5
s10 = call s11()
a2 = this
a3 = v_key
a4 = vmt_address18
a5 = f19
t0 = v6
t1 = current_node
t2 = parent_node
t3 = cont
t4 = found
t5 = is_root
a6 = s10
if0 a6 goto if_else_20
a7 = t1
t2 = a7
s10 = t1
v23 = s10
s11 = v23
s10 = [s11 + 0]
vmt_address24 = s10
s11 = vmt_address24
s10 = [s11 + 16]
f25 = s10
s11 = f25
this = a2
v_key = a3
vmt_address18 = a4
f19 = a5
v16 = a6
v21 = a7
a2 = v23
v6 = t0
current_node = t1
parent_node = t2
cont = t3
found = t4
is_root = t5
s10 = call s11()
a2 = this
a3 = v_key
a4 = vmt_address18
a5 = f19
a6 = v16
a7 = v21
t0 = v6
t1 = current_node
t2 = parent_node
t3 = cont
t4 = found
t5 = is_root
v22 = s10
s11 = v22
t1 = s11
goto if_end_26
if_else_20:
s10 = 0
v27 = s10
s11 = v27
t3 = s11
if_end_26:
goto if_end_28
if_else_15:
s10 = s5
v30 = s10
s10 = a3
v31 = s10
s10 = v30
s11 = v31
s10 = s10 < s11
v29 = s10
s10 = v29
if0 s10 goto if_else_32
s10 = t1
v34 = s10
s11 = v34
s10 = [s11 + 0]
vmt_address35 = s10
s11 = vmt_address35
s10 = [s11 + 28]
f36 = s10
s11 = f36
this = a2
v_key = a3
vmt_address18 = a4
f19 = a5
v16 = a6
v21 = a7
a2 = v34
v6 = t0
current_node = t1
parent_node = t2
cont = t3
found = t4
is_root = t5
s10 = call s11()
a2 = this
a3 = v_key
a4 = vmt_address18
a5 = f19
a6 = v16
a7 = v21
t0 = v6
t1 = current_node
t2 = parent_node
t3 = cont
t4 = found
t5 = is_root
v33 = s10
s10 = v33
if0 s10 goto if_else_37
s10 = t1
v38 = s10
s11 = v38
t2 = s11
s10 = t1
v40 = s10
s11 = v40
s10 = [s11 + 0]
vmt_address41 = s10
s11 = vmt_address41
s10 = [s11 + 12]
f42 = s10
s11 = f42
this = a2
v_key = a3
vmt_address18 = a4
f19 = a5
v16 = a6
v21 = a7
a2 = v40
v6 = t0
current_node = t1
parent_node = t2
cont = t3
found = t4
is_root = t5
s10 = call s11()
a2 = this
a3 = v_key
a4 = vmt_address18
a5 = f19
a6 = v16
a7 = v21
t0 = v6
t1 = current_node
t2 = parent_node
t3 = cont
t4 = found
t5 = is_root
v39 = s10
s11 = v39
t1 = s11
goto if_end_43
if_else_37:
s10 = 0
v44 = s10
s11 = v44
t3 = s11
if_end_43:
goto if_end_45
if_else_32:
s10 = t5
v46 = s10
s10 = v46
if0 s10 goto if_else_47
s10 = t1
v51 = s10
s11 = v51
s10 = [s11 + 0]
vmt_address52 = s10
s11 = vmt_address52
s10 = [s11 + 28]
f53 = s10
s11 = f53
this = a2
v_key = a3
vmt_address18 = a4
f19 = a5
v16 = a6
v21 = a7
a2 = v51
v6 = t0
current_node = t1
parent_node = t2
cont = t3
found = t4
is_root = t5
s10 = call s11()
a2 = this
a3 = v_key
a4 = vmt_address18
a5 = f19
a6 = v16
a7 = v21
t0 = v6
t1 = current_node
t2 = parent_node
t3 = cont
t4 = found
t5 = is_root
v50 = s10
s10 = v50
if0 s10 goto if_else_54
s10 = 0
v49 = s10
goto if_end_55
if_else_54:
s10 = 1
v49 = s10
if_end_55:
s10 = t1
v58 = s10
s11 = v58
s10 = [s11 + 0]
vmt_address59 = s10
s11 = vmt_address59
s10 = [s11 + 32]
f60 = s10
s11 = f60
this = a2
v_key = a3
vmt_address18 = a4
f19 = a5
v16 = a6
v21 = a7
a2 = v58
v6 = t0
current_node = t1
parent_node = t2
cont = t3
found = t4
is_root = t5
s10 = call s11()
a2 = this
a3 = v_key
a4 = vmt_address18
a5 = f19
a6 = v16
a7 = v21
t0 = v6
t1 = current_node
t2 = parent_node
t3 = cont
t4 = found
t5 = is_root
v57 = s10
s10 = v57
if0 s10 goto if_else_61
s10 = 0
v56 = s10
goto if_end_62
if_else_61:
s10 = 1
v56 = s10
if_end_62:
s10 = v49
s11 = v56
s10 = s10 * s11
v48 = s10
s10 = v48
if0 s10 goto if_else_63
s10 = 1
v64 = s10
s11 = v64
s10 = s11
ntb = s10
goto if_end_65
if_else_63:
s10 = a2
v67 = s10
s11 = v67
s10 = [s11 + 0]
vmt_address68 = s10
s11 = vmt_address68
s10 = [s11 + 56]
f69 = s10
s10 = t2
v70 = s10
s10 = t1
v71 = s10
s11 = f69
this = a2
v_key = a3
vmt_address18 = a4
f19 = a5
v16 = a6
v21 = a7
a2 = v67
a3 = v70
a4 = v71
v6 = t0
current_node = t1
parent_node = t2
cont = t3
found = t4
is_root = t5
s10 = call s11()
a2 = this
a3 = v_key
a4 = vmt_address18
a5 = f19
a6 = v16
a7 = v21
t0 = v6
t1 = current_node
t2 = parent_node
t3 = cont
t4 = found
t5 = is_root
v66 = s10
s11 = v66
s10 = s11
ntb = s10
if_end_65:
goto if_end_72
if_else_47:
s10 = a2
v74 = s10
s11 = v74
s10 = [s11 + 0]
vmt_address75 = s10
s11 = vmt_address75
s10 = [s11 + 56]
f76 = s10
s10 = t2
v77 = s10
s10 = t1
v78 = s10
s11 = f76
this = a2
v_key = a3
vmt_address18 = a4
f19 = a5
v16 = a6
v21 = a7
a2 = v74
a3 = v77
a4 = v78
v6 = t0
current_node = t1
parent_node = t2
cont = t3
found = t4
is_root = t5
s10 = call s11()
a2 = this
a3 = v_key
a4 = vmt_address18
a5 = f19
a6 = v16
a7 = v21
t0 = v6
t1 = current_node
t2 = parent_node
t3 = cont
t4 = found
t5 = is_root
v73 = s10
s11 = v73
s10 = s11
ntb = s10
if_end_72:
s10 = 1
v79 = s10
s11 = v79
t4 = s11
s10 = 0
v80 = s10
s11 = v80
t3 = s11
if_end_45:
if_end_28:
s10 = 0
v81 = s10
s11 = v81
t5 = s11
goto while5
break_while_7:
t0 = t4
v82 = t0
s3 = stack_save_variable_s3
s4 = stack_save_variable_s4
s5 = stack_save_variable_s5
s6 = stack_save_variable_s6
s7 = stack_save_variable_s7
s8 = stack_save_variable_s8
s9 = stack_save_variable_s9
s1 = stack_save_variable_s1
s2 = stack_save_variable_s2
      return v82

func Tree_Remove()
t0 = a4
t1 = [t0 + 0]
t2 = [t1 + 32]
s11 = t2
this = a2
p_node = a3
c_node = a4
a2 = t0
s10 = call s11()
a2 = this
a3 = p_node
a4 = c_node
t1 = s10
if0 t1 goto if_else_4
t0 = a2
t1 = [t0 + 0]
t2 = [t1 + 64]
t1 = a3
t3 = a4
s11 = t2
this = a2
p_node = a3
c_node = a4
a2 = t0
a3 = t1
a4 = t3
s10 = call s11()
a2 = this
a3 = p_node
a4 = c_node
t4 = s10
t0 = t4
goto if_end_11
if_else_4:
t0 = a4
t1 = [t0 + 0]
t2 = [t1 + 28]
s11 = t2
this = a2
p_node = a3
c_node = a4
a2 = t0
s10 = call s11()
a2 = this
a3 = p_node
a4 = c_node
t1 = s10
if0 t1 goto if_else_16
t0 = a2
t1 = [t0 + 0]
t2 = [t1 + 60]
t1 = a3
t3 = a4
s11 = t2
this = a2
p_node = a3
c_node = a4
a2 = t0
a3 = t1
a4 = t3
s10 = call s11()
a2 = this
a3 = p_node
a4 = c_node
t4 = s10
t0 = t4
goto if_end_23
if_else_16:
t0 = a4
t1 = [t0 + 0]
t2 = [t1 + 20]
s11 = t2
this = a2
p_node = a3
a2 = t0
s10 = call s11()
a2 = this
a3 = p_node
t1 = s10
t0 = t1
t1 = a3
t2 = [t1 + 0]
t3 = [t2 + 16]
s11 = t3
this = a2
p_node = a3
a2 = t1
auxkey1 = t0
s10 = call s11()
a2 = this
a3 = p_node
t0 = auxkey1
t2 = s10
t1 = [t2 + 0]
t3 = [t1 + 20]
s11 = t3
this = a2
p_node = a3
a2 = t2
auxkey1 = t0
s10 = call s11()
a2 = this
a3 = p_node
t0 = auxkey1
t1 = s10
t2 = t1
t1 = a2
t3 = [t1 + 0]
t4 = [t3 + 44]
t3 = t0
t0 = t2
s11 = t4
this = a2
p_node = a3
a2 = t1
a3 = t3
a4 = t0
s10 = call s11()
a2 = this
a3 = p_node
t2 = s10
if0 t2 goto if_else_41
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 8]
t1 = 40
t3 = 4
t1 = t1 + t3
t3 = a2 + t1
t1 = [t3 + 0]
s11 = t2
this = a2
p_node = a3
a2 = t0
a3 = t1
s10 = call s11()
a2 = this
a3 = p_node
t3 = s10
t0 = t3
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 36]
t1 = 0
s11 = t2
this = a2
p_node = a3
a2 = t0
a3 = t1
s10 = call s11()
a2 = this
a3 = p_node
t3 = s10
t0 = t3
goto if_end_55
if_else_41:
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 4]
t1 = 40
t3 = 4
t1 = t1 + t3
t3 = a2 + t1
t1 = [t3 + 0]
s11 = t2
p_node = a3
a2 = t0
a3 = t1
s10 = call s11()
a3 = p_node
t3 = s10
t0 = t3
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 40]
t1 = 0
s11 = t2
a2 = t0
a3 = t1
s10 = call s11()
t3 = s10
t0 = t3
if_end_55:
if_end_23:
if_end_11:
t0 = 1
v69 = t0
      return v69

func Tree_RemoveRight()
stack_save_variable_s3 = s3
stack_save_variable_s4 = s4
stack_save_variable_s5 = s5
stack_save_variable_s6 = s6
stack_save_variable_s7 = s7
stack_save_variable_s8 = s8
stack_save_variable_s9 = s9
stack_save_variable_s1 = s1
stack_save_variable_s2 = s2
while0:
t0 = a4
t1 = [t0 + 0]
t2 = [t1 + 28]
s11 = t2
this = a2
p_node = a3
c_node = a4
a2 = t0
v2 = t0
vmt_address3 = t1
f4 = t2
s10 = call s11()
a2 = this
a3 = p_node
a4 = c_node
t0 = v2
t1 = vmt_address3
t2 = f4
t3 = s10
if0 t3 goto break_while_5
t4 = a4
t5 = [t4 + 0]
s1 = [t5 + 24]
s2 = a4
s3 = [s2 + 0]
s4 = [s3 + 12]
s11 = s4
this = a2
p_node = a3
c_node = a4
a2 = s2
v2 = t0
vmt_address3 = t1
f4 = t2
v1 = t3
v7 = t4
vmt_address8 = t5
s10 = call s11()
a2 = this
a3 = p_node
a4 = c_node
t0 = v2
t1 = vmt_address3
t2 = f4
t3 = v1
t4 = v7
t5 = vmt_address8
s5 = s10
s6 = [s5 + 0]
s7 = [s6 + 20]
s11 = s7
this = a2
p_node = a3
c_node = a4
a2 = s5
v2 = t0
vmt_address3 = t1
f4 = t2
v1 = t3
v7 = t4
vmt_address8 = t5
s10 = call s11()
a2 = this
a3 = p_node
a4 = c_node
t0 = v2
t1 = vmt_address3
t2 = f4
t3 = v1
t4 = v7
t5 = vmt_address8
s8 = s10
s11 = s1
this = a2
p_node = a3
c_node = a4
a2 = t4
a3 = s8
v2 = t0
vmt_address3 = t1
f4 = t2
v1 = t3
v7 = t4
vmt_address8 = t5
s10 = call s11()
a2 = this
a3 = p_node
a4 = c_node
t0 = v2
t1 = vmt_address3
t2 = f4
t3 = v1
t4 = v7
t5 = vmt_address8
s9 = s10
a5 = s9
a6 = a4
a3 = a6
a7 = a4
s10 = [a7 + 0]
vmt_address20 = s10
s11 = vmt_address20
s10 = [s11 + 12]
f21 = s10
s11 = f21
this = a2
p_node = a3
c_node = a4
ntb = a5
v17 = a6
v19 = a7
a2 = v19
v2 = t0
vmt_address3 = t1
f4 = t2
v1 = t3
v7 = t4
vmt_address8 = t5
s10 = call s11()
a2 = this
a3 = p_node
a4 = c_node
a5 = ntb
a6 = v17
a7 = v19
t0 = v2
t1 = vmt_address3
t2 = f4
t3 = v1
t4 = v7
t5 = vmt_address8
v18 = s10
s11 = v18
a4 = s11
goto while0
break_while_5:
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 4]
t1 = 40
t3 = 4
t1 = t1 + t3
t3 = a2 + t1
t1 = [t3 + 0]
s11 = t2
p_node = a3
a2 = t0
a3 = t1
s10 = call s11()
a3 = p_node
t3 = s10
t0 = t3
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 40]
t1 = 0
s11 = t2
a2 = t0
a3 = t1
s10 = call s11()
t3 = s10
t0 = t3
t0 = 1
v35 = t0
s3 = stack_save_variable_s3
s4 = stack_save_variable_s4
s5 = stack_save_variable_s5
s6 = stack_save_variable_s6
s7 = stack_save_variable_s7
s8 = stack_save_variable_s8
s9 = stack_save_variable_s9
s1 = stack_save_variable_s1
s2 = stack_save_variable_s2
      return v35

func Tree_RemoveLeft()
stack_save_variable_s3 = s3
stack_save_variable_s4 = s4
stack_save_variable_s5 = s5
stack_save_variable_s6 = s6
stack_save_variable_s7 = s7
stack_save_variable_s8 = s8
stack_save_variable_s9 = s9
stack_save_variable_s1 = s1
stack_save_variable_s2 = s2
while0:
t0 = a4
t1 = [t0 + 0]
t2 = [t1 + 32]
s11 = t2
this = a2
p_node = a3
c_node = a4
a2 = t0
v2 = t0
vmt_address3 = t1
f4 = t2
s10 = call s11()
a2 = this
a3 = p_node
a4 = c_node
t0 = v2
t1 = vmt_address3
t2 = f4
t3 = s10
if0 t3 goto break_while_5
t4 = a4
t5 = [t4 + 0]
s1 = [t5 + 24]
s2 = a4
s3 = [s2 + 0]
s4 = [s3 + 16]
s11 = s4
this = a2
p_node = a3
c_node = a4
a2 = s2
v2 = t0
vmt_address3 = t1
f4 = t2
v1 = t3
v7 = t4
vmt_address8 = t5
s10 = call s11()
a2 = this
a3 = p_node
a4 = c_node
t0 = v2
t1 = vmt_address3
t2 = f4
t3 = v1
t4 = v7
t5 = vmt_address8
s5 = s10
s6 = [s5 + 0]
s7 = [s6 + 20]
s11 = s7
this = a2
p_node = a3
c_node = a4
a2 = s5
v2 = t0
vmt_address3 = t1
f4 = t2
v1 = t3
v7 = t4
vmt_address8 = t5
s10 = call s11()
a2 = this
a3 = p_node
a4 = c_node
t0 = v2
t1 = vmt_address3
t2 = f4
t3 = v1
t4 = v7
t5 = vmt_address8
s8 = s10
s11 = s1
this = a2
p_node = a3
c_node = a4
a2 = t4
a3 = s8
v2 = t0
vmt_address3 = t1
f4 = t2
v1 = t3
v7 = t4
vmt_address8 = t5
s10 = call s11()
a2 = this
a3 = p_node
a4 = c_node
t0 = v2
t1 = vmt_address3
t2 = f4
t3 = v1
t4 = v7
t5 = vmt_address8
s9 = s10
a5 = s9
a6 = a4
a3 = a6
a7 = a4
s10 = [a7 + 0]
vmt_address20 = s10
s11 = vmt_address20
s10 = [s11 + 16]
f21 = s10
s11 = f21
this = a2
p_node = a3
c_node = a4
ntb = a5
v17 = a6
v19 = a7
a2 = v19
v2 = t0
vmt_address3 = t1
f4 = t2
v1 = t3
v7 = t4
vmt_address8 = t5
s10 = call s11()
a2 = this
a3 = p_node
a4 = c_node
a5 = ntb
a6 = v17
a7 = v19
t0 = v2
t1 = vmt_address3
t2 = f4
t3 = v1
t4 = v7
t5 = vmt_address8
v18 = s10
s11 = v18
a4 = s11
goto while0
break_while_5:
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 8]
t1 = 40
t3 = 4
t1 = t1 + t3
t3 = a2 + t1
t1 = [t3 + 0]
s11 = t2
p_node = a3
a2 = t0
a3 = t1
s10 = call s11()
a3 = p_node
t3 = s10
t0 = t3
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 36]
t1 = 0
s11 = t2
a2 = t0
a3 = t1
s10 = call s11()
t3 = s10
t0 = t3
t0 = 1
v35 = t0
s3 = stack_save_variable_s3
s4 = stack_save_variable_s4
s5 = stack_save_variable_s5
s6 = stack_save_variable_s6
s7 = stack_save_variable_s7
s8 = stack_save_variable_s8
s9 = stack_save_variable_s9
s1 = stack_save_variable_s1
s2 = stack_save_variable_s2
      return v35

func Tree_Search()
stack_save_variable_s3 = s3
stack_save_variable_s4 = s4
stack_save_variable_s5 = s5
stack_save_variable_s6 = s6
stack_save_variable_s7 = s7
stack_save_variable_s8 = s8
stack_save_variable_s9 = s9
stack_save_variable_s1 = s1
stack_save_variable_s2 = s2
t0 = a2
t1 = t0
t0 = 1
t2 = t0
t0 = 0
t3 = t0
while3:
t0 = t2
if0 t0 goto break_while_5
t4 = t1
t5 = [t4 + 0]
s1 = [t5 + 20]
s11 = s1
v_key = a3
a2 = t4
v4 = t0
current_node = t1
cont = t2
ifound = t3
v7 = t4
vmt_address8 = t5
s10 = call s11()
a3 = v_key
t0 = v4
t1 = current_node
t2 = cont
t3 = ifound
t4 = v7
t5 = vmt_address8
s2 = s10
s3 = s2
s4 = a3
s5 = s3
s6 = s4 < s5
if0 s6 goto if_else_13
s7 = t1
s8 = [s7 + 0]
s9 = [s8 + 32]
s11 = s9
v_key = a3
a2 = s7
v4 = t0
current_node = t1
cont = t2
ifound = t3
v7 = t4
vmt_address8 = t5
s10 = call s11()
a3 = v_key
t0 = v4
t1 = current_node
t2 = cont
t3 = ifound
t4 = v7
t5 = vmt_address8
a2 = s10
if0 a2 goto if_else_18
a4 = t1
a5 = [a4 + 0]
a6 = [a5 + 16]
s11 = a6
v14 = a2
v_key = a3
v20 = a4
vmt_address21 = a5
f22 = a6
a2 = v20
v4 = t0
current_node = t1
cont = t2
ifound = t3
v7 = t4
vmt_address8 = t5
s10 = call s11()
a2 = v14
a3 = v_key
a4 = v20
a5 = vmt_address21
a6 = f22
t0 = v4
t1 = current_node
t2 = cont
t3 = ifound
t4 = v7
t5 = vmt_address8
a7 = s10
t1 = a7
goto if_end_23
if_else_18:
s10 = 0
v24 = s10
s11 = v24
t2 = s11
if_end_23:
goto if_end_25
if_else_13:
s10 = s3
v27 = s10
s10 = a3
v28 = s10
s10 = v27
s11 = v28
s10 = s10 < s11
v26 = s10
s10 = v26
if0 s10 goto if_else_29
s10 = t1
v31 = s10
s11 = v31
s10 = [s11 + 0]
vmt_address32 = s10
s11 = vmt_address32
s10 = [s11 + 28]
f33 = s10
s11 = f33
v14 = a2
v_key = a3
v20 = a4
vmt_address21 = a5
f22 = a6
v19 = a7
a2 = v31
v4 = t0
current_node = t1
cont = t2
ifound = t3
v7 = t4
vmt_address8 = t5
s10 = call s11()
a2 = v14
a3 = v_key
a4 = v20
a5 = vmt_address21
a6 = f22
a7 = v19
t0 = v4
t1 = current_node
t2 = cont
t3 = ifound
t4 = v7
t5 = vmt_address8
v30 = s10
s10 = v30
if0 s10 goto if_else_34
s10 = t1
v36 = s10
s11 = v36
s10 = [s11 + 0]
vmt_address37 = s10
s11 = vmt_address37
s10 = [s11 + 12]
f38 = s10
s11 = f38
v14 = a2
v_key = a3
v20 = a4
vmt_address21 = a5
f22 = a6
v19 = a7
a2 = v36
v4 = t0
current_node = t1
cont = t2
ifound = t3
v7 = t4
vmt_address8 = t5
s10 = call s11()
a2 = v14
a3 = v_key
a4 = v20
a5 = vmt_address21
a6 = f22
a7 = v19
t0 = v4
t1 = current_node
t2 = cont
t3 = ifound
t4 = v7
t5 = vmt_address8
v35 = s10
s11 = v35
t1 = s11
goto if_end_39
if_else_34:
s10 = 0
v40 = s10
s11 = v40
t2 = s11
if_end_39:
goto if_end_41
if_else_29:
s10 = 1
v42 = s10
s11 = v42
t3 = s11
s10 = 0
v43 = s10
s11 = v43
t2 = s11
if_end_41:
if_end_25:
goto while3
break_while_5:
t0 = t3
v44 = t0
s3 = stack_save_variable_s3
s4 = stack_save_variable_s4
s5 = stack_save_variable_s5
s6 = stack_save_variable_s6
s7 = stack_save_variable_s7
s8 = stack_save_variable_s8
s9 = stack_save_variable_s9
s1 = stack_save_variable_s1
s2 = stack_save_variable_s2
      return v44

func Tree_Print()
t0 = a2
t1 = t0
t0 = a2
t2 = [t0 + 0]
t3 = [t2 + 76]
t2 = t1
s11 = t3
a2 = t0
a3 = t2
s10 = call s11()
t1 = s10
t0 = t1
t0 = 1
v6 = t0
      return v6

func Tree_RecPrint()
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 32]
s11 = t2
this = a2
node = a3
a2 = t0
s10 = call s11()
a2 = this
a3 = node
t1 = s10
if0 t1 goto if_else_4
t0 = a2
t1 = [t0 + 0]
t2 = [t1 + 76]
t1 = a3
t3 = [t1 + 0]
t4 = [t3 + 16]
s11 = t4
this = a2
node = a3
a2 = t1
v6 = t0
f8 = t2
s10 = call s11()
a2 = this
a3 = node
t0 = v6
t2 = f8
t3 = s10
s11 = t2
this = a2
node = a3
a2 = t0
a3 = t3
s10 = call s11()
a2 = this
a3 = node
t1 = s10
t0 = t1
goto if_end_13
if_else_4:
t0 = 1
t1 = t0
if_end_13:
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 20]
s11 = t2
this = a2
node = a3
a2 = t0
s10 = call s11()
a2 = this
a3 = node
t1 = s10
print(t1)
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 28]
s11 = t2
this = a2
node = a3
a2 = t0
s10 = call s11()
a2 = this
a3 = node
t1 = s10
if0 t1 goto if_else_23
t0 = a2
t1 = [t0 + 0]
t2 = [t1 + 76]
t1 = a3
t3 = [t1 + 0]
t4 = [t3 + 12]
s11 = t4
a2 = t1
v25 = t0
f27 = t2
s10 = call s11()
t0 = v25
t2 = f27
t3 = s10
s11 = t2
a2 = t0
a3 = t3
s10 = call s11()
t1 = s10
t0 = t1
goto if_end_32
if_else_23:
t0 = 1
t1 = t0
if_end_32:
t0 = 1
v34 = t0
      return v34

func Tree_accept()
t0 = 333
print(t0)
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 0]
t1 = a2
s11 = t2
a2 = t0
a3 = t1
s10 = call s11()
t3 = s10
t0 = t3
t0 = 0
v6 = t0
      return v6

func Visitor_visit()
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 28]
s11 = t2
this = a2
n = a3
a2 = t0
s10 = call s11()
a2 = this
a3 = n
t1 = s10
if0 t1 goto if_else_4
t0 = 8
t1 = 4
t0 = t0 + t1
t2 = a2 + t0
t0 = 1
t3 = t2
t3 = t3 + t1
[t3 + 0] = t0
t0 = a3
t1 = [t0 + 0]
t3 = [t1 + 12]
s11 = t3
this = a2
n = a3
a2 = t0
v7 = t2
s10 = call s11()
a2 = this
a3 = n
t2 = v7
t1 = s10
[t2 + 0] = t1
t0 = 8
t1 = 4
t0 = t0 + t1
t1 = a2 + t0
t0 = [t1 + 0]
t1 = [t0 + 0]
t2 = [t1 + 80]
t1 = a2
s11 = t2
this = a2
n = a3
a2 = t0
a3 = t1
s10 = call s11()
a2 = this
a3 = n
t3 = s10
t0 = t3
goto if_end_22
if_else_4:
t0 = 0
t1 = t0
if_end_22:
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 32]
s11 = t2
this = a2
n = a3
a2 = t0
s10 = call s11()
a2 = this
a3 = n
t1 = s10
if0 t1 goto if_else_28
t0 = 0
t1 = 4
t0 = t0 + t1
t2 = a2 + t0
t0 = 1
t3 = t2
t3 = t3 + t1
[t3 + 0] = t0
t0 = a3
t1 = [t0 + 0]
t3 = [t1 + 16]
s11 = t3
this = a2
a2 = t0
v31 = t2
s10 = call s11()
a2 = this
t2 = v31
t1 = s10
[t2 + 0] = t1
t0 = 0
t1 = 4
t0 = t0 + t1
t1 = a2 + t0
t0 = [t1 + 0]
t1 = [t0 + 0]
t2 = [t1 + 80]
t1 = a2
s11 = t2
a2 = t0
a3 = t1
s10 = call s11()
t3 = s10
t0 = t3
goto if_end_46
if_else_28:
t0 = 0
t1 = t0
if_end_46:
t0 = 0
v48 = t0
      return v48

func MyVisitor_visit()
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 28]
s11 = t2
this = a2
n = a3
a2 = t0
s10 = call s11()
a2 = this
a3 = n
t1 = s10
if0 t1 goto if_else_4
t0 = 8
t1 = 4
t0 = t0 + t1
t2 = a2 + t0
t0 = 1
t3 = t2
t3 = t3 + t1
[t3 + 0] = t0
t0 = a3
t1 = [t0 + 0]
t3 = [t1 + 12]
s11 = t3
this = a2
n = a3
a2 = t0
v7 = t2
s10 = call s11()
a2 = this
a3 = n
t2 = v7
t1 = s10
[t2 + 0] = t1
t0 = 8
t1 = 4
t0 = t0 + t1
t1 = a2 + t0
t0 = [t1 + 0]
t1 = [t0 + 0]
t2 = [t1 + 80]
t1 = a2
s11 = t2
this = a2
n = a3
a2 = t0
a3 = t1
s10 = call s11()
a2 = this
a3 = n
t3 = s10
t0 = t3
goto if_end_22
if_else_4:
t0 = 0
t1 = t0
if_end_22:
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 20]
s11 = t2
this = a2
n = a3
a2 = t0
s10 = call s11()
a2 = this
a3 = n
t1 = s10
print(t1)
t0 = a3
t1 = [t0 + 0]
t2 = [t1 + 32]
s11 = t2
this = a2
n = a3
a2 = t0
s10 = call s11()
a2 = this
a3 = n
t1 = s10
if0 t1 goto if_else_32
t0 = 0
t1 = 4
t0 = t0 + t1
t2 = a2 + t0
t0 = 1
t3 = t2
t3 = t3 + t1
[t3 + 0] = t0
t0 = a3
t1 = [t0 + 0]
t3 = [t1 + 16]
s11 = t3
this = a2
a2 = t0
v35 = t2
s10 = call s11()
a2 = this
t2 = v35
t1 = s10
[t2 + 0] = t1
t0 = 0
t1 = 4
t0 = t0 + t1
t1 = a2 + t0
t0 = [t1 + 0]
t1 = [t0 + 0]
t2 = [t1 + 80]
t1 = a2
s11 = t2
a2 = t0
a3 = t1
s10 = call s11()
t3 = s10
t0 = t3
goto if_end_50
if_else_32:
t0 = 0
t1 = t0
if_end_50:
t0 = 0
v52 = t0
      return v52


