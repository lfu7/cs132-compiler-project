.equiv @sbrk, 9
.equiv @print_string, 4
.equiv @print_char, 11
.equiv @print_int, 1
.equiv @exit 10
.equiv @exit2, 17

.text
jal Main
li a0, @exit
ecall

.globl Main
Main:
sw fp, -8(sp)
mv fp, sp
li t6, 28
sub sp, sp, t6
sw ra, -4(fp)
li t0, 4
sw t0, -12(fp)
lw t1, -12(fp)
mv a0, t1
jal alloc
mv t0, a0
sw t0, -16(fp)
lw t1, -12(fp)
mv a0, t1
jal alloc
mv t0, a0
sw t0, -20(fp)
la t0, FacComputeFac
sw t0, -12(fp)
lw t0, -20(fp)
lw t1, -12(fp)
sw t1, 0(t0)
lw t0, -20(fp)
sw t0, -12(fp)
lw t0, -16(fp)
lw t1, -12(fp)
sw t1, 0(t0)
lw t0, -16(fp)
bne t0, zero ,Main_end_0
j Main_null1
Main_end_0:
lw t1, -16(fp)
lw t0, 0(t1)
sw t0, -24(fp)
lw t1, -24(fp)
lw t0, 0(t1)
sw t0, -24(fp)
li t0, 6
sw t0, -12(fp)
lw t1, -24(fp)
lw s1, -16(fp)
lw s2, -12(fp)
li t6, 8
sub sp, sp, t6
lw t6, -16(fp)
sw t6, 0(sp)
lw t6, -12(fp)
sw t6, 4(sp)
jalr t1
mv t0, a0
sw t0, -28(fp)
lw t0, -28(fp)
mv a1, t0
li a0, @print_int
ecall
li a1, 10
li a0, 11
ecall
j Main_main_end
Main_null1:
la a0, msg_0
j error
Main_main_end:
lw a0, -12(fp)
lw ra, -4(fp)
lw fp, -8(fp)
addi sp, sp, 28
addi sp, sp, 8
jr ra

.globl FacComputeFac
FacComputeFac:
sw fp, -8(sp)
mv fp, sp
li t6, 8
sub sp, sp, t6
sw ra, -4(fp)
li t0, 1
sw t0, 4(fp)
lw a0, 4(fp)
lw ra, -4(fp)
lw fp, -8(fp)
addi sp, sp, 8
addi sp, sp, 0
jr ra

.globl error
error:
mv a1, a0                                # Move msg address to a1
li a0, @print_string                     # Code for print_string ecall
ecall # Print error message in a1
li a1, 10                                # Load newline character
li a0, @print_char                       # Code for print_char ecall
ecall                                    # Print newline
li a0, @exit                             # Code for exit ecall
ecall                                    # Exit with code
abort_17:                                  # Infinite loop
j abort_17                               # Prevent fallthrough

.globl alloc
alloc:
mv a1, a0                                # Move requested size to a1
li a0, @sbrk                             # Code for ecall: sbrk
ecall                                    # Request a1 bytes
jr ra                                    # Return to caller

.data

.globl msg_0
msg_0:
.asciiz "null pointer"
.align 2

.globl msg_1
msg_1:
.asciiz "array index out of bounds"
.align 2
