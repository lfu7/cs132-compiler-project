.equiv @sbrk, 9
.equiv @print_string, 4
.equiv @print_char, 11
.equiv @print_int, 1
.equiv @exit 10
.equiv @exit2, 17

.text
jal Main
li a0, @exit
ecall

.globl Main
Main:
sw fp, -8(sp)
mv fp, sp
li t6, 16
sub sp, sp, t6
sw ra, -4(fp)
la t3, f
sw t3, -12(fp)
jalr t3
mv t0, a0
lw t3, -12(fp)
sw t0, -16(fp)
lw t1, -16(fp)
mv a1, t1
li a0, @print_int
ecall
li a1, 10
li a0, 11
ecall
lw a0, -16(fp)
lw ra, -4(fp)
lw fp, -8(fp)
addi sp, sp, 16
jr ra

.globl f
f:
sw fp, -8(sp)
mv fp, sp
li t6, 156
sub sp, sp, t6
sw ra, -4(fp)
sw s1, -12(fp)
sw s2, -16(fp)
sw s3, -20(fp)
sw s4, -24(fp)
sw s5, -28(fp)
sw s6, -32(fp)
sw s7, -36(fp)
sw s8, -40(fp)
sw s9, -44(fp)
sw s10, -48(fp)
sw s11, -52(fp)
li t3, 10
li t0, 20
sw t0, -56(fp)
lw t2, -56(fp)
add t0, t3, t2
sw t0, -60(fp)
li t4, 30
slt t5, t3, t4
bne t5, zero ,f_end_0
j f_L8
f_end_0:
lw t2, -60(fp)
add t0, t3, t2
sw t0, -64(fp)
lw t2, -56(fp)
add t0, t3, t2
sw t0, -68(fp)
j f_L10
f_L8:
lw t1, -56(fp)
lw t2, -60(fp)
add t0, t1, t2
sw t0, -72(fp)
j f_L14
f_L10:
li s1, 50
lw t1, -64(fp)
add t0, t1, s1
sw t0, -56(fp)
lw t1, -60(fp)
lw t2, -64(fp)
add s2, t1, t2
lw t2, -68(fp)
add s3, s2, t2
mv a1, s3
li a0, @print_int
ecall
li a1, 10
li a0, 11
ecall
lw t1, -60(fp)
lw t2, -68(fp)
add t0, t1, t2
sw t0, -72(fp)
li s4, 40
lw t1, -56(fp)
add t0, t1, s4
sw t0, -56(fp)
j f_L8
f_L14:
li s5, 10
add t0, t3, s5
sw t0, -68(fp)
f_L22:
li t0, 55
sw t0, -56(fp)
li s6, 20
sub t0, t3, s6
sw t0, -60(fp)
lw t1, -56(fp)
lw t2, -60(fp)
slt s7, t1, t2
bne s7, zero ,f_end_1
j f_L20
f_end_1:
lw t1, -60(fp)
lw t2, -56(fp)
add t0, t1, t2
sw t0, -64(fp)
lw t1, -64(fp)
sub t0, t1, s5
sw t0, -72(fp)
lw t1, -64(fp)
lw t2, -72(fp)
add s8, t1, t2
mv a1, s8
li a0, @print_int
ecall
li a1, 10
li a0, 11
ecall
lw t1, -60(fp)
lw t2, -72(fp)
add t0, t1, t2
sw t0, -56(fp)
li s9, 2
lw t2, -56(fp)
sub t0, s9, t2
sw t0, -68(fp)
j f_L22
f_L20:
li s10, 7
lw t1, -68(fp)
add t0, t1, s10
sw t0, -56(fp)
lw t1, -60(fp)
lw t2, -56(fp)
add t0, t1, t2
sw t0, -60(fp)
li s9, 2
lw t2, -60(fp)
mul t0, s9, t2
sw t0, -72(fp)
lw t1, -68(fp)
add t0, t1, s5
sw t0, -76(fp)
li s11, 55
sw s11, -80(fp)
la t0, g
sw t0, -84(fp)
lw t1, -76(fp)
lw t2, -80(fp)
slt t4, t1, t2
bne t4, zero ,f_end_2
j f_L27
f_end_2:
lw t1, -76(fp)
sub t0, t1, s6
sw t0, -88(fp)
sw t3, -92(fp)
sw t4, -96(fp)
sw t5, -100(fp)
lw t1, -84(fp)
li t6, 32
sub sp, sp, t6
lw t6, -56(fp)
sw t6, 0(sp)
lw t6, -60(fp)
sw t6, 4(sp)
lw t6, -64(fp)
sw t6, 8(sp)
lw t6, -72(fp)
sw t6, 12(sp)
lw t6, -68(fp)
sw t6, 16(sp)
lw t6, -76(fp)
sw t6, 20(sp)
lw t6, -80(fp)
sw t6, 24(sp)
lw t6, -88(fp)
sw t6, 28(sp)
jalr t1
mv t0, a0
li t6, 32
add sp, sp, t6
lw t4, -96(fp)
lw t5, -100(fp)
lw t3, -92(fp)
sw t0, -80(fp)
lw t1, -88(fp)
lw t2, -80(fp)
add t0, t1, t2
sw t0, -104(fp)
j f_L29
f_L27:
li t0, 1
sw t0, -108(fp)
lw t1, -76(fp)
lw t2, -108(fp)
add t0, t1, t2
sw t0, -112(fp)
lw t2, -112(fp)
mul t0, s9, t2
sw t0, -104(fp)
f_L29:
li t0, 5
sw t0, -116(fp)
lw t1, -104(fp)
lw t2, -116(fp)
sub t0, t1, t2
sw t0, -120(fp)
lw t1, -76(fp)
lw t2, -120(fp)
add t0, t1, t2
sw t0, -112(fp)
lw t1, -104(fp)
lw t2, -112(fp)
sub t0, t1, t2
sw t0, -124(fp)
lw t1, -124(fp)
lw t2, -120(fp)
add t0, t1, t2
sw t0, -128(fp)
lw t1, -128(fp)
mv a1, t1
li a0, @print_int
ecall
li a1, 10
li a0, 11
ecall
lw t1, -104(fp)
lw t2, -112(fp)
add t0, t1, t2
sw t0, -88(fp)
lw t1, -60(fp)
lw t2, -64(fp)
add t0, t1, t2
sw t0, -60(fp)
lw t1, -64(fp)
add t0, t1, s6
sw t0, -132(fp)
lw t1, -88(fp)
lw t2, -132(fp)
add t0, t1, t2
sw t0, -136(fp)
lw t1, -64(fp)
lw t2, -136(fp)
slt s2, t1, t2
f_L3:
bne s2, zero ,f_end_3
j f_L12
f_end_3:
lw t1, -64(fp)
lw t2, -132(fp)
add t0, t1, t2
sw t0, -140(fp)
li t0, 30
sw t0, -144(fp)
lw t1, -140(fp)
lw t2, -144(fp)
add t0, t1, t2
sw t0, -148(fp)
lw t1, -88(fp)
lw t2, -148(fp)
sub t0, t1, t2
sw t0, -148(fp)
lw t1, -140(fp)
lw t2, -148(fp)
sub t0, t1, t2
sw t0, -136(fp)
li t0, 0
sw t0, -152(fp)
lw t1, -136(fp)
lw t2, -152(fp)
mul s2, t1, t2
lw t1, -60(fp)
lw t2, -76(fp)
add t0, t1, t2
sw t0, -132(fp)
lw t1, -140(fp)
lw t2, -136(fp)
add t0, t1, t2
sw t0, -136(fp)
lw t1, -132(fp)
lw t2, -136(fp)
sub t0, t1, t2
sw t0, -156(fp)
lw t1, -156(fp)
mv a1, t1
li a0, @print_int
ecall
li a1, 10
li a0, 11
ecall
j f_L3
f_L12:
lw t1, -112(fp)
lw t2, -136(fp)
sub t0, t1, t2
sw t0, -76(fp)
lw t1, -140(fp)
lw t2, -76(fp)
add t0, t1, t2
sw t0, -76(fp)
lw s3, -20(fp)
lw s4, -24(fp)
lw s5, -28(fp)
lw s11, -52(fp)
lw s6, -32(fp)
lw s10, -48(fp)
lw s7, -36(fp)
lw s8, -40(fp)
lw s9, -44(fp)
lw s1, -12(fp)
lw s2, -16(fp)
lw a0, -76(fp)
lw ra, -4(fp)
lw fp, -8(fp)
addi sp, sp, 156
jr ra

.globl g
g:
sw fp, -8(sp)
mv fp, sp
li t6, 60
sub sp, sp, t6
sw ra, -4(fp)
sw s1, -12(fp)
sw s2, -16(fp)
sw s3, -20(fp)
sw s4, -24(fp)
sw s5, -28(fp)
sw s6, -32(fp)
sw s7, -36(fp)
lw t1, 0(fp)
lw t2, 4(fp)
add t3, t1, t2
lw t1, 8(fp)
lw t2, 12(fp)
add t4, t1, t2
lw t1, 16(fp)
lw t2, 20(fp)
add t5, t1, t2
lw t1, 24(fp)
lw t2, 28(fp)
add s1, t1, t2
li t0, 10
sw t0, -40(fp)
lw t1, -40(fp)
mv s2, t1
lw t1, 28(fp)
lw t2, 0(fp)
slt t0, t1, t2
sw t0, -44(fp)
lw t1, -44(fp)
bne t1, zero ,g_end_4
j g_L42
g_end_4:
la s3, g
sw t3, -48(fp)
sw t4, -52(fp)
sw t5, -56(fp)
li t6, 32
sub sp, sp, t6
lw t6, -44(fp)
sw t6, 0(sp)
lw t6, 24(fp)
sw t6, 4(sp)
lw t6, -44(fp)
sw t6, 8(sp)
lw t6, 16(fp)
sw t6, 12(sp)
lw t6, -40(fp)
sw t6, 16(sp)
lw t6, -44(fp)
sw t6, 20(sp)
lw t6, 4(fp)
sw t6, 24(sp)
lw t6, -40(fp)
sw t6, 28(sp)
jalr s3
mv t0, a0
li t6, 32
add sp, sp, t6
lw t4, -52(fp)
lw t5, -56(fp)
lw t3, -48(fp)
mv t3, t0
g_L42:
sub s2, s1, t3
mul s4, t4, s2
sub s5, t5, s4
add s6, s1, s2
add s7, s2, s4
add t0, s5, s6
sw t0, -60(fp)
lw s3, -20(fp)
lw s4, -24(fp)
lw s5, -28(fp)
lw s6, -32(fp)
lw s7, -36(fp)
lw s1, -12(fp)
lw s2, -16(fp)
lw a0, -60(fp)
lw ra, -4(fp)
lw fp, -8(fp)
addi sp, sp, 60
jr ra

.globl error
error:
mv a1, a0                                # Move msg address to a1
li a0, @print_string                     # Code for print_string ecall
ecall # Print error message in a1
li a1, 10                                # Load newline character
li a0, @print_char                       # Code for print_char ecall
ecall                                    # Print newline
li a0, @exit                             # Code for exit ecall
ecall                                    # Exit with code
abort_17:                                  # Infinite loop
j abort_17                               # Prevent fallthrough

.globl alloc
alloc:
mv a1, a0                                # Move requested size to a1
li a0, @sbrk                             # Code for ecall: sbrk
ecall                                    # Request a1 bytes
jr ra                                    # Return to caller

.data

.globl msg_0
msg_0:
.asciiz "null pointer"
.align 2

.globl msg_1
msg_1:
.asciiz "array index out of bounds"
.align 2

